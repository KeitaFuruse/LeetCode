
フロイドの循環検出法（tortoise and the hare algorithm）と呼ばれる手法。

単方向リストの中からサイクル（最後のノードが指すノード）を見つける。

例）
①→②→③→④
  ↑←⑤←↓
  
この場合、最後尾のノード⑤のnextは②なので、②がサイクルであると言える。

この時slowとfastという２つのポインターを用意する。
slowが１つ進む間にfastは２つ進む

slow = slow.next
fast = fast.next.next

①から②（サイクル）までの距離をxと置く
②（サイクル）から⑤（slowとfastが出会った地点）までの距離をyと置く
⑤slowとfastが出会った地点）から②（サイクル）までの地点をzと置く

この時、slowとfastが出会うまでの間にslowが移動した距離はx+y。
fastが移動した距離はx+y+z+y。

「slowが１つ進む間にfastは２つ進む」ということは、2(x+y)=x+y+z+y。
式を変形するとx=zとなる。

つまり、headからサイクルまでの距離とslowとfastが出会った地点からサイクルまでの距離は等しいという事が言える。

つまりheadとslow（もしくはfast）を同じスピードで進ませて出会う地点がサイクルである。

head = head.next
slow = slow.next


